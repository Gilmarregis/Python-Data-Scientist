import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.pyplot import figure
%matplotlib inline



#Importando as bibliotecas necess√°rias
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.pyplot import figure
%matplotlib inline



#Visualizando os dados em forma de tabela

A = np.array([ [ 749, 1.],
     [724, 0.99],
     [699,0.89],
     [674,0.79],
     [649,0.68],
     [624,0.57],
     [599,0.47],
     [574,0.37],
     [549,0.28],
     [524,0.17],
     [499,0.07]])

df = pd.DataFrame(A, columns = ['nu (Frequ√™ncia)','V_p (Pontencial)'])
print(df)

nu, Vp = 1e12*A[:,0], A[:,1]

print(nu, Vp)

#Frequ√™ncia
nu=1e12*np.array([749,724,699,674,649,624,599,574,549,524,499],dtype=float)

#valores do potencial de paragem ùëâ_p (V)
Vp=np.array([1,0.99,0.89,0.79,0.68,0.57,0.47,0.37,0.28,0.17,0.07])

#Resolvendo o sistema linear para obter os coeficientes da equa√ß√£o linear
alpha_hat = np.linalg.inv(A.T.dot(A)).dot(A.T).dot(Vp)

print(alpha_hat)

#Utilizando somente o valor de interesse
h = - alpha_hat[:1]

print(h)

# Valor predito para um pr√≥ximo ponto de acordo com os dados obtidos.
yhat = A.dot(alpha_hat)

# Plot dos dados e do valor predito (yhat)
plt.scatter(nu, Vp)
plt.plot(nu, yhat, color='red')
plt.text(6.0,0.4,'h='+str(h))
plt.xlabel(r'$\nu$')
plt.ylabel(r'$V_p$(V)')
plt.legend([r'Ajuste Linear $y = ax +b$', r'Dados'])
plt.title('Determina√ß√£o da constante de Planck')
plt.show()



# ------------------
# IA: Previs√£o com Regress√£o Linear (Machine Learning)
# ------------------
# Neste bloco, ao inv√©s de usar apenas o modelo f√≠sico para ajuste,
# aplicamos um algoritmo de IA (Machine Learning) - Regress√£o Linear -
# para aprender a rela√ß√£o entre a frequ√™ncia (ŒΩ) e o potencial de parada (Vp)
# a partir dos dados experimentais, e ent√£o prever novos valores.

from sklearn.linear_model import LinearRegression
import numpy as np

# Dados experimentais
# Frequ√™ncia da luz incidente (ŒΩ) em Hz
# Potencial de parada (Vp) em Volts
# Obs: Valores fict√≠cios apenas para exemplifica√ß√£o
nu = np.array([5.0e14, 5.5e14, 6.0e14, 6.5e14, 7.0e14]).reshape(-1, 1)  # Vari√°vel independente
Vp = np.array([0.5, 0.9, 1.3, 1.6, 2.0])  # Vari√°vel dependente

# Criando o modelo de Machine Learning
# A regress√£o linear vai ajustar Vp = m * ŒΩ + b sem depender explicitamente da equa√ß√£o f√≠sica.
model = LinearRegression()

# "Treinando" o modelo com os dados experimentais
model.fit(nu, Vp)

# Definindo novas frequ√™ncias para prever o potencial de parada
novas_frequencias = np.array([[7.5e14], [8.0e14]])

# Usando o modelo treinado para prever Vp para as novas frequ√™ncias
Vp_previsto_ml = model.predict(novas_frequencias)

# Exibindo resultados das previs√µes
for freq, vp in zip(novas_frequencias.flatten(), Vp_previsto_ml):
    print(f"Frequ√™ncia: {freq:.2e} Hz -> Vp previsto (IA/ML): {vp:.3f} V")

# ------------------
# Visualiza√ß√£o gr√°fica
# ------------------
import matplotlib.pyplot as plt

# Pontos originais do experimento
plt.scatter(nu, Vp, color='blue', label='Dados experimentais')

# Linha de ajuste obtida pelo modelo de IA (ML)
plt.plot(nu, model.predict(nu), color='red', label='Ajuste IA (ML)')

# Pontos de previs√£o para novas frequ√™ncias
plt.scatter(novas_frequencias, Vp_previsto_ml, color='green', label='Previs√µes IA')

# Configura√ß√µes do gr√°fico
plt.xlabel('Frequ√™ncia (Hz)')
plt.ylabel('Potencial de parada (V)')
plt.title('Ajuste e Previs√£o por IA (Regress√£o Linear - ML)')
plt.legend()
plt.grid(True)
plt.show()

